!第六章 考察
!!初期バージョンとバージョン2の比較
初期バージョンとバージョン2では，後者の方がプログラム自体の行数は多い．しかしそれは動的メソッドを実装するにあたって
重複分をまとめた関数を増やしたためである．今後新たに数学関数を実装していくと仮定した場合，既に重複分がまとめてある関数を
実装するならば，プログラムに書き足すのは実装する数学関数についての関数のみであるので，かなり簡潔で済む．
しかし，既に実装されているものと重複がないまたは出力が同じでない場合，初期バージョンと同じようにプログラムを
書くことになる．加えて初期バージョンはMapleに送る式を必ず書くため，Mapleでのプログラムに慣れた人には
初期バージョンの方で実装する方が容易かもしれない．

{{attach_view(mapleruby_eringi.009.png,mapleruby_eringi)}}

図5-7 各バージョンの利点，欠点

!!maplerubyを使うメリット
最大のメリットは，Rubyだけで桁数の大きい計算や複雑な数学関数を必要とする計算を完結させられることである．
今後扱える関数を増やせば，利用者がMapleについて詳しくない人でもRubyのプログラムを書くだけで数値計算処理が
可能になるだろう．またRubyライブラリにあるTest::Unitと並行して使用すれば，求めたい解が分かっている際に
自分が書いたプログラムで正しく解が導けるのかテストすることも可能である．

!!maplerubyの問題点
maplerubyの問題点を3つあげる．
1つ目はRubyは無償で使えるがMapleは有償である点．よって，利用者が限られてしまう．
2つ目はRMapleクラスの中に使いたい関数が実装されてない場合，自力で関数を実装するか
Maplerubyクラスを直に使うかしなければならない点．よってプログラミングにMapleの知識が必要になってくるため
メリットで挙げた「Rubyプログラムを書くだけで数値計算処理が可能になる」のが難しくなる．
3つ目は桁数の大きい計算は確かにできるものの，処理に多少時間がかかってしまう点．処理速度を上げようと思うと
Maple自体の処理速度を上げなければならない．

!!今後の課題
!!!関数の充実化
今回は限られた関数のみを選抜して実装したが，他にもたくさんの数学関数がMapleには用意されている．
RSA暗号のプログラムをmaplerubyで実装した際に直接Maplerubyクラスに送ることで対応した等式の解を出力するevalや累乗などの
頻繁に使われるであろう関数についてできるだけ対応させる．
他にも桁数が大きな数値はそもそもRubyの変数が扱いきれない場合も考えられるので，そこにうまく対処できるような関数が欲しい．
!!!グラフの描画
Mapleが綺麗にグラフを描画できる数式処理ソフトウェアであることを利用して，maplerubyもグラフ描画に対応させる．
MapleはCUI版でのグラフがかなり見にくく，二次元ならまだしも三次元になると何が何だか分からないグラフになるため，
画像としてのグラフを出力できるような関数を実装する．