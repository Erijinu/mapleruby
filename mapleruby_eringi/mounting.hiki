!第四章 実装
!!maplerubyの基本動作
入力された値の次の素数を出力するnextprimeを用いて説明する．
!!!caption:図3-1 maplerubyの基本動作
{{attach_view(mapleruby_eringi.003.png,mapleruby_eringi)}}

#maplerubyをrequireした上で使いたい関数を使う．RMaple.new.hogehogeのhogehogeに使いたい関数名を入れる．今回はnextprimeで説明を進める．
#RMapleクラス内のnextprime関数が呼び出され，aに3が入る．この時nextprimeは入力された値がint型になるように関数内でto_iしてある．その後，Maplerubyクラスのexec_i関数へ"nextprime(3)"が出力される．この出力された文字列がそのままMapleでの計算に使われる．
#出力された文字列をさらにexec関数へ出力する．
#青四角内の内容をMapleへと出力する．この時\verb|#{@maple_code};|となっている部分に先ほどの"nextprime(3)"が入る．青四角の内容がMapleに出力され実行されることで得られた答えがresult.txtに出力されるようになっている．
#result.txtに出力された内容をRuby側で受け取り，exec_iに再び返す．
#返された値をto_iすることでint型に直して解を出力する．

!!出力の切り替えの実装例
先ほどと同様にnextprimeを例に挙げると
exec_iは，execでmapleに式を送った後mapleから受け取った値をto_iし，int型にしてから返すようになっている．
もし使われた関数が素数判定をtrue/falseで出力するisprimeだった場合は，
出力はboolean型が好ましいため受け取った値をboolean型にするexec_bを用いている．
このように整数論に関する関数は，出力に応じてint型で解を得たい場合はexec_i，float型ならexec_f，string型ならexec_sと
することで切り替えられるようになっている．
!!実装するにあたっての例外
行列の場合は出力に切り替えについて例外が存在する．なぜなら，MapleのCUI版は行列の表現が図3-2のように独自のもので
，それがresult.txtを通してRubyに出力されるからだ．
例えば，行列を生成する関数matrixは以下の図3-2のように解を出力する．

!!!caption:図3-2 MapleCUI版での行列の表示
{{attach_view(mapleruby_eringi.004.png,mapleruby_eringi)}}

この空白部分には半角スペースや改行が入っている上，余分な括弧が付いている．この関数を使う際に行列を生成して出力するだけなら問題ないが
計算に使う場合Rubyの方で都合の良い出力型に変える必要がある．そのためのwrapperを考える必要がある．
!!!行列におけるwrapperの実装
計算で使うことを仮定すると，int型の要素を持つlistlist構造で出力されるのが最も良いと考えた．
今回実装した行列の関数の多くは，listlist構造のものをMapleのconvertというlistlist構造からMaple内で扱う行列の形に変換できる関数も
一緒にRubyからMapleに送るようにしているためである．
行列生成した後理想の型で値を得るためには，いらない記号や空白を取り除き要素をint型にする必要があった．
図3-3はmatrixを実装した後，exec_m(b)というwrapperを作ってみた際に生まれた失敗である．

!!!caption:図3-3 exec_m(b)を実装した際の失敗例
{{attach_view(mapleruby_eringi.005.png,mapleruby_eringi)}}

bには生成した行列の列の数が入る．実装する際に初めに考えたのが図3-3の左側のプログラムである．
まずRubyのsplitメソッドを使って1文字ずつに分け，分けた要素全てをint型に変換する．空白はint型に変えた際0になるため，0になった空白部分をdelete_ifメソッドを用いて
削除し，最後にeach_sliceメソッドを用いて1行目，2行目...と分けてそれぞれ配列に入れ，出力したかった行列と同じようなlistlist構造になるはずだった．
しかし，listlist構造への変換はできていたが途中delete_ifメソッドにより0を消してしまったため，行列の要素で0が含まれていた場合に
行列の要素まで消えてしまった．しかも，1文字ずつ分けているため2桁以上の桁数を持つ要素はばらばらになってしまった．
そのことを踏まえて，右側のプログラムを作成した．今度は1文字ずつ分けるところまでは先ほどと一緒で，空白を丸ごと消そうとするのではなく
delete_ifメソッドで" "(空白)，\verb|"\n"|，"["，"]"を順番に削除した後にto_iし，先ほどと同じようにeach_sliceメソッドでlistlist構造になるようにした．
こうしたことによって，要素に0が含まれていてもきちんと出力されるようにはなったが，桁数の問題が残っている．
そして，以下の図3-4ように実装することで期待通りに出力を得られるようになった．

!!!caption:図3-4 exec_m(b)の完成形
{{attach_view(mapleruby_eringi.006.png,mapleruby_eringi)}}

完成形では，まずgsubメソッドで数字以外の記号を空白に置き換え，splitメソッドで空白を指定することで空白を区切りとした配列にした後
int型に直す．直した配列はその後，先ほどと同様にeach_sliceメソッドを用いてlistlist構造になるようにしている．
!!動的メソッドを用いての実装
一通り実装した後，次に動的メソッドを用いて実装することにより重複コードを減らすように試みたバージョン2を作成した．

!!!caption:図3-5 左が初期バージョン，右がバージョン2
{{attach_view(mapleruby_eringi.007.png,mapleruby_eringi)}}

初期バージョンでは，関数ごとに各引数を好ましい型に変換した後Maplerubyクラスに遷移していた.
バージョン2では，各数学関数はMapleでの関数名と引数のみになり，新たに作ったmain_i関数にそれらを
送ることで初期バージョンと同様の動作を実装している．main_i関数の第二引数が可変長引数になっているのは
関数によって入力されている引数の個数が違うためである．例えばmain_i関数は出力がint型である関数に対して使っており，
図3-6のように実装した関数の重複部分や出力に応じて分類して，それぞれ関数を追加している．

!!!caption:図3-6 関数の分類
{{attach_view(mapleruby_eringi.008.png,mapleruby_eringi)}}

matrixは他にexec_m(b)を使う関数がないため，importmatrixは他と重複するコードがないため例外としている．
